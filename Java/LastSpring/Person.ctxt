#BlueJ class context
comment0.target=Person
comment0.text=\r\n\ Today\:\r\n\ this/super\ review\r\n\ compareTo\ interface\r\n\ iterators\ (list,\ enumerations)\ -->\ apply\ to\ a\ collection\ of\ OBJECTS\ \r\n\ (not\ just\ Integers/Strings)\r\n\ \r\n\ Javadocs\:\ formal\ API\ documentation\ that\ you\ can\ build\ for\ your\ class\ to\ give\ people\ an\ understanding\r\n\ in\ English\ about\ what\ each\ of\ the\ constructors\ and\ methods\ does,\ what\ parameters\ they\ accept,\r\n\ and\ what\ they\ return,\ if\ anything\r\n\ You\ google\ "String\ Java\ API"\ and\ see\ Javadocs\ for\ all\ the\ methods\ in\ the\ String\ class\r\n\ Now,\ it's\ up\ to\ us\ to\ generate\ our\ own\ API's\ for\ our\ specific\ code\ that\ WE\ write\r\n\ \r\n\ Another\ topic\:\ Collections\ class\r\n\ compareTo\:\ YOU\ define\ your\ ordering\ -->\ Java\ provides\ a\ fast\ sorting\ method\ based\ on\ the\ compareTo\r\n\ method\ that\ YOU\ specified.\ Sorting\ method\ is\ a\ static\ method\ from\ the\ Collections\ class\ called\ sort\r\n\ -->\ for\ any\ collection\ C,\ call\ Collections.sort(C);\ -->\ sort\ the\ elements\ according\ to\ nat.\ ordering\r\n\ \r\n\ Collections\ has\ other\ static\ methods\ that\ are\ also\ nice\ to\ know\ about\r\n\ \r\n\ Remaining\ topics\:\r\n\ 1.\ Collections\ class\ -->\ static\ methods\ that\ operate\ on\ dynamic\ collections\ (array\ lists,\ sets,\ stacks)\r\n\ 2.\ Arrays\ class\ -->\ static\ methods\ that\ operate\ on\ static\ arrays\r\n\ 3.\ numeric\ data\ types\ -->\ int,\ double\ -->\ short,\ long,\ float\r\n\ 4.\ pass\ by\ value\r\n\ 5.\ PriorityQueues\r\n\ \r\n\ Tonight\:\ Collections.sort(x),\ Collections.fill(x,y),\ Collections.max(x),\ Collections.swap(x,y,z)\r\n\ \r\n\ Next\ time\:\ Review\ compareTo()\ -->\ Collectoins.sort(x)\r\n\ Next\ time\:\ Also\ review\ fill,\ max,\ and\ swap\r\n\ Next\ time\:\ introduce\ a\ few\ more\ methods\ from\ Collections\ class,\ but\ then\ start\ talking\ about\ the\ Arrays\ class\r\n\ which\ also\ offers\ static\ methods,\ but\ this\ time\ just\ on\ static\ arrays\r\n\ 2\ classes\ from\ now\:\ numeric\ data\ types\r\n\ 3\ classes\ from\ now\:\ pass\ by\ value\r\n\ 4\ classes\ from\ now\:\ PriorityQueues\r\n\ Optional\:\ final\ class\ (5\ from\ now)\:\ you\ can\ ask\ any\ curious/clarifying\ questions\ about\ the\ entire\ Java\ curriculum\r\n
comment1.params=name\ w
comment1.target=Person(java.lang.String,\ int)
comment1.text=\r\n\ Constructor\ which\ creates\ an\ instance\ of\ the\ Person\ class\ by\ accepting\ a\ name\ and\ an\ age\ and\ \r\n\ assigning\ those\ instance\ variables\r\n\ @param\ name\ the\ name\ of\ the\ new\ Person\ object\r\n\ @param\ w\ the\ age\ of\ the\ new\ Person\ object\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment11.params=
comment11.target=void\ throwException()
comment11.text=\r\n\ This\ instance\ method\ [is\ called\ on\ an\ instance\ of\ class]\ and\ immediately\ throws\ an\ ArithmeticException\ if\r\n\ the\ age\ of\ the\ Person\ instance\ is\ even\ (divisible\ by\ 2)\r\n\ Write\:\ @throw,\ then\ write\ the\ type\ of\ exception,\ then\ write\ the\ conditions\ in\ which\ that\ exception\ is\ thrown\r\n\ \r\n\ @throw\ ArithmeticException\r\n
comment12.params=x
comment12.target=int\ compareTo(java.lang.Object)
comment12.text=\r\n\ If\ you\ want\ to\ sort\ objects\ of\ a\ class,\ here\ are\ the\ steps\ you\ take\r\n\ 1.\ implement\ Comparable\ interface\r\n\ 2.\ define\ an\ instance\ called\ compareTo\ that\ accepts\ an\ OBJECT\ and\ returns\ an\ int\r\n\ 3.\ in\ the\ method\ body,\ polymorph\ the\ OBJECT\ to\ the\ class\ type\ that\ you're\ in\ (Object\ -->\ Person)\r\n\ 4.\ define\ what\ it\ means\ to\ be\ less\ than\ x\ (return\ negative\ integer),\ equal\ to\ x\ (return\ 0),\ or\r\n\ greater\ than\ x\ (return\ positive\ integer)\r\n\ \r\n\ Java\ terms\:\ *this*\ is\ compared\ to\ x\r\n
comment2.params=
comment2.target=Person()
comment2.text=\r\n\ Default\ constructor\ which\ assigns\ the\ name\ and\ age\ of\ a\ new\ Person\ object\ to\ "Kate"\ and\ 20,\ respectively\r\n\ this(a,b)\ calls\ the\ parameterized\ constructor\ with\ the\ default\ values\ a\ and\ b\r\n
comment3.params=name
comment3.target=Person(java.lang.String)
comment4.params=x
comment4.target=Person(int)
comment5.params=
comment5.target=java.lang.String\ getName()
comment6.params=
comment6.target=int\ getAge()
comment6.text=\r\n\ Returns\ the\ age\ of\ the\ Person\ object\r\n\ \r\n\ @return\ the\ age\ of\ the\ Person\ object\r\n
comment7.params=newName
comment7.target=void\ setName(java.lang.String)
comment7.text=\r\n\ This\ method\ accepts\ a\ String\ input,\ which\ the\ name\ of\ the\ Person\ object\ is\ reassigned\ to\r\n\ \r\n\ @param\ newName\ the\ name\ to\ change\ the\ name\ of\ the\ Person\ instance\ to\r\n
comment8.params=age
comment8.target=void\ setAge(int)
comment9.params=
comment9.target=void\ haveBirthday()
comment9.text=\r\n\ How\ do\ we\ define\ a\ haveBirthday\ method\ by\ USING\ the\ setAge\ method\ above?\r\n
numComments=13
