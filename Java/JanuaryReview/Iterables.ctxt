#BlueJ class context
comment0.target=Iterables
comment0.text=\r\n\ 6\ essential\ data\ structures\:\r\n\ 1.\ indexed\ list\ -\ collection\ of\ elements\ which\ are\ accessed\ by\ INDEX\ POSITIONS\r\n\ 1a.\ ArrayList\:\ iterator\ and\ list\ iterator\r\n\ 1b.\ Vector\:\ iterator,\ list\ iterator,\ and\ an\ enumeration\r\n\ \r\n\ 2.\ linked\ list\ -\ collection\ of\ nodes\ which\ sequentially\ point\ to\ the\ next\ node\r\n\ (-)\ harder\ to\ retrieve\ and\ change\ elements\r\n\ (+)\ easier\ to\ add\ and\ remove\ elements\ from\ the\ beginning\r\n\ 2a.\ LinkedList\ -\ iterator\ and\ list\ iterator\r\n\ \r\n\ 3.\ stacks\ -\ last-in-first-out\ data\ structure,\ push(x),\ peek(),\ pop().\ Subclass\ of\ Vector\r\n\ 3a.\ Stack\ -\ iterator,\ list\ iterator,\ and\ enumeration\r\n\ \r\n\ 4.\ queues\ -\ first-in-first-out\ data\ structure,\ \r\n\ adding\ a\ LAST\ element\ -->\ add(x)\ [exception-possible]\ or\ offer(x)\ [no\ exceptions]\r\n\ return\ and\ remove\ FIRST\ -->\ remove()\ [exception-possible]\ or\ poll()\ [no\ exceptions]\r\n\ return\ FIRST\ without\ removing\ -->\ element()\ [exception-possible]\ or\ peek()\ [no\ exceptions]\r\n\ 4a.\ Queue<\ X\ >\ myQueue\ \=\ new\ LinkedList<\ X\ >();\ -->\ iterator\r\n\ 4b.\ ConcurrentLinkedQueue<\ X\ >\ myQueue\ \=\ new\ ConcurrentLinkedQueue<\ X\ >(\ );\ -->\ iterator\r\n\ (import\ java.util.concurrent.ConcurrentLinkedQueue)\r\n\ \r\n\ 5.\ sets\ -\ unique\ elements\ (no\ duplicates)\ which\ are\ characteristically\ unordered\r\n\ adding\ an\ already\ existing\ element\ and\ removing\ a\ nonexisting\ element\ have\ no\ impact\r\n\ (in\ contrast\ to\ throwing\ an\ exception...they\ do\ not\ do\ that)\r\n\ 5a.\ HashSet\ -\ iterator\r\n\ 5b.\ LinkedHashSet\ -\ iterator\ (subclass\ of\ HashSet)\r\n\ \r\n\ 6.\ maps/dictionaries\ -\ a\ collection\ of\ unordered\ key-value\ pairs\ where\ the\ keys\ map\ to\ values\r\n\ the\ keys\ have\ to\ be\ unique,\ but\ the\ values\ do\ not\ have\ to\ be\ unique\r\n\ the\ keys\ are\ one\ data\ type,\ and\ the\ values\ are\ another\ data\ type\r\n\ in\ general\ they\ are\ different\ data\ types\ but\ they\ do\ not\ have\ to\ be\r\n\ 6a.\ HashMap\ -\ iterator\ on\ keys,\ iterator\ on\ values\r\n\ 6b.\ Hashtable\ -\ iterator\ on\ keys,\ iterator\ on\ values,\ enumeration\ \r\n\ 6c.\ LinkedHashMap\ -\ iterator\ on\ keys,\ iterator\ on\ values\r\n\ 6d.\ ConcurrentHashMap\ -\ iterator\ on\ keys,\ iterator\ on\ values,\ enumeration\r\n\ \r\n\ if\ you\ want\ to\ iterate\ through\ the\ values\ in\ a\ hashtable\ or\ concurrent\ hash\ map\ \r\n\ using\ some\ type\ of\ iterator,\ you\ have\ 3\ options\:\r\n\ 1.\ iterator\ on\ the\ keys\ called\ keyParse\ -->\ myDictionary.get(\ keyParse.next()\ )\r\n\ 2.\ iterator\ on\ the\ values\ called\ valueParse\ -->\ valueParse.next()\r\n\ 3.\ enumeration\ on\ the\ dictionary\ itself\ called\ apple\ -->\ apple.nextElement()\r\n\ \r\n\ think\ about\ general\ functionality\ with\ data\ structures\r\n\ methods\ like\:\ add(x),\ size(),\ contains(x),\ remove(x),\ isEmpty()\ ,\ toString()\r\n\ dictionary\:\ containsKey(x),\ containsValue(x),\ putAll(x)\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
numComments=2
