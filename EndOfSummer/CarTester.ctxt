#BlueJ class context
comment0.target=CarTester
comment0.text=\r\n\ 3\ types\ of\ sorting\ algorithms\:\r\n\ bubble\ sort\r\n\ insertion\ sort\r\n\ selection\ sort\r\n\ \r\n\ 2\ types\ of\ searching\ algorithms\:\r\n\ linear\ search\r\n\ binary\ search\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=void\ binaryExample()
comment1.text=\r\n\ We\ will\ perform\ linear\ search\ with\ some\ property\ of\ Car\ objects\ (their\ price)\r\n\ We\ hope\ to\ determine\ th\ eindex\ position\ of\ a\ Car\ object\ whose\ price\ is\ equal\r\n\ to\ some\ value\r\n\ We\ will\ immediatley\ exit\ out\ of\ the\ list\ when\ we\ determine\ the\ first\ occurrence\r\n\ of\ that\ element\r\n\ 1.\ found\ boolean,\ static\ array\r\n\ 2.\ break\ keyword,\ dynamic\ array\r\n\ \r\n\ 8\ different\ ways\ \r\n\ 2\ options\:\ found\ boolean\ OR\ break\ statement\r\n\ 2\ options\:\ for\ loop\ OR\ while\ loop\r\n\ 2\ options\:\ static\ array\ OR\ dynamic\ array\r\n\ >\=8\ combinations\ of\ ways\ to\ write\ the\ linear\ search\ algorithm\r\n
comment10.params=unsorted
comment10.target=java.util.ArrayList\ insertionSort(java.util.ArrayList)
comment10.text=\r\n\ This\ method\ accepts\ a\ dynamic\ array\ of\ Car\ objects\ and\ sorts\ them\ according\ to\ the\r\n\ compareTo(\ )\ method...\ uses\ the\ insertion\ sort\ algorithm\r\n\ \r\n\ @param\ unsorted\ the\ arraylist\ of\ Car\ objects\r\n\ @return\ a\ sorted\ version\ of\ the\ arraylist\r\n
comment11.params=unsorted
comment11.target=Car[]\ insertionSort(Car[])
comment11.text=\r\n\ This\ method\ accepts\ a\ static\ array\ of\ Car\ objects\ and\ sorts\ them\ according\ to\ the\r\n\ compareTo(\ )\ method\ provided\ by\ the\ Car\ class\r\n\ It\ uses\ the\ insertion\ sort\ algorithm\r\n\ \r\n\ @param\ unsorted\ the\ array\ of\ Car\ objects\ to\ be\ sorted\r\n\ @return\ a\ sorted\ version\ of\ the\ input\r\n
comment12.params=unsorted
comment12.target=Car[]\ bubbleSort(Car[])
comment12.text=\r\n\ This\ method\ accepts\ a\ static\ array\ of\ Car\ objects\ and\ sorts\ them\ according\ to\ the\r\n\ compareTo(\ )\ method\ provided\ by\ the\ Car\ class\r\n\ It\ uses\ the\ bubble\ sort\ algorithm\r\n\ \r\n\ @param\ unsorted\ the\ array\ of\ Car\ objects\ to\ be\ sorted\r\n\ @return\ a\ sorted\ version\ of\ the\ input\r\n
comment13.params=unsorted
comment13.target=java.util.ArrayList\ bubbleSort(java.util.ArrayList)
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment2.params=myCars\ targetPrice
comment2.target=int\ linearSearch(Car[],\ int)
comment2.text=\r\n\ This\ method\ accepts\ a\ static\ array\ of\ Car\ objects\ and\ returns\ the\ index\ position\r\n\ of\ the\ first\ occurrence\ of\ the\ Car\ object\ in\ the\ array\ whose\ price\ matches\ the\r\n\ target\ price\ parameterized\r\n\ @param\ myCars\ the\ collection\ of\ Car\ objects\r\n\ @param\ targetPrice\ the\ price\ to\ search\ for\r\n\ @return\ the\ index\ position\ of\ the\ first\ occurrence\ of\ the\ Car\ object\ with\ that\ price\r\n
comment3.params=myCars\ targetPrice
comment3.target=int\ linearSearch(java.util.ArrayList,\ int)
comment4.params=myCars\ targetPrice
comment4.target=int\ binarySearch(Car[],\ int)
comment5.params=myCars\ targetPrice\ left\ right
comment5.target=int\ binarySearch(Car[],\ int,\ int,\ int)
comment6.params=
comment6.target=void\ test()
comment7.params=
comment7.target=void\ example()
comment8.params=unsorted
comment8.target=java.util.ArrayList\ selectionSort(java.util.ArrayList)
comment9.params=unsorted
comment9.target=Car[]\ selectionSort(Car[])
comment9.text=\r\n\ This\ method\ accepts\ a\ static\ array\ of\ Car\ objects\ and\ sorts\ them\ according\ to\ the\r\n\ compareTo(\ )\ method\ provided\ by\ the\ Car\ class\r\n\ It\ uses\ the\ selection\ sort\ algorithm\r\n\ \r\n\ @param\ unsorted\ the\ array\ of\ Car\ objects\ to\ be\ sorted\r\n\ @return\ a\ sorted\ version\ of\ the\ input\r\n
numComments=15
