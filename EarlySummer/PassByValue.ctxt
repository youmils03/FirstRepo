#BlueJ class context
comment0.target=PassByValue
comment0.text=\r\n\ Write\ a\ description\ of\ class\ PassByValue\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=x
comment1.target=void\ addOne(int)
comment1.text=\r\n\ This\ method\ accepts\ an\ integer\ and\ tries\ to\ add\ one\ to\ it\ without\ returning\ anything\r\n\ \r\n\ @param\ x\ the\ integer\ to\ try\ adding\ 1\ to\r\n
comment2.params=value
comment2.target=PassByValue(int)
comment3.params=
comment3.target=void\ solutionOne()
comment4.params=u
comment4.target=int\ solutionTwo(int)
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ We\ define\ what\ it\ means\ to\ print\ an\ instance\ of\ a\ class\r\n\ For\ example\r\n\ PassByValue\ P\ \=\ new\ PassByValue(\ 50\ );\r\n\ System.out.println(\ P\ );\ //what\ is\ meant\ by\ this\ code\r\n
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment6.text=\r\n\ there\ are\ 3\ solutions\ to\ this\:\r\n\ 1.\ create\ an\ object\ out\ of\ it.\ You\ make\ it\ an\ instance\ method\r\n\ Person\ s\ \=\ new\ Person(52);\r\n\ s.solutionOne(\ );\r\n\ System.out.println(\ s\ );\ //53\r\n\ \r\n\ 2.\ return\ a\ number\ 1\ larger\ for\ example\ instead\r\n\ int\ g\ \=\ 5;\r\n\ System.out.println(\ solutionTwo(g)\ );\ //6\r\n\ \r\n\ 3.\ have\ an\ array\ with\ at\ least\ one\ element;\ keep\ track\ the\ first\ one\ instance\r\n\ int\ state\ \=\ new\ int[1];\r\n\ state[0]\ \=\ -4;\r\n\ solutionThree(state);\r\n\ System.out.println(\ state[0]\ <\=\ -4\ );\ //false,\ it's\ -3\ now\r\n\ \r\n\ 4.\ make\ a\ change\ to\ the\ class\ variable\ using\ a\ static\ void\ method\r\n\ class\ variable\ Tony\ -->\ 194\r\n\ in\ the\ main\ method\ -->\ solutionFour(Tony);\ \r\n\ System.out.println(Tony);\ -->\ 195\r\n\ \r\n\ Summary\ of\ the\ concepts\:\r\n\ printing\ statements\ and\ comments\r\n\ arithmetic\ expressions\ System.out.println(10*12);\r\n\ variables,\ change\ the\ value\ of\ two\ variables\r\n\ implicit\ and\ explicit\ casting\:\ int\ -->\ String,\ int\ -->\ double,\ double\ -->\ String\r\n\ explicit\ casting\:\ (int)\ \ (double)\ numbers,\ Integer.toString(x),\ Double.toString(y)\r\n\ String\ methods\:\ length(),\ substring(4),\ substring(1,3),\ startsWith(),\ endsWith(),\ ...\r\n\ look\ up\ the\ rest\ in\ the\ API\r\n\ booleans\:\ true/false,\ boolean\ logic,\ conditions.\ true,\ false\r\n\ if/elseif/else\ logic\r\n\ switch\ statements\r\n\ while\ loops,\ for\ loops,\ do\ while\r\n\ 1D\ arrays\:\ index\ positions,\ how\ to\ create\ them\r\n\ char\ data\ type,\ ASCII\ encoding\r\n\ for-each\ loops\r\n\ Scanner\ class\:\ user\ input\r\n\ Math\ class\r\n\ static\ methods\r\n\ object-oriented\ programming\:\ constructors,\ getter/setter\ methods,\ toString(\ )\r\n\ arrays\ of\ objects\:\r\n\ ArrayLists\ -->\ ArrayLists\ cannot\ hold\ primitives\r\n\ recursion\r\n\ inheritance\ and\ polymorphism\r\n\ Javadocs\r\n\ abstraction\:\ abstract\ class\ or\ an\ interface\r\n\ sorting\ algorithms\:\ bubble,\ insertion,\ selection\r\n\ searching\ algorithms\:\ linear/sequential,\ binary\r\n\ exceptions\r\n\ threading\ /\ concurrent\ programming\r\n\ linkedlists,\ vectors,\ stacks,\ queues,\ concurrent\ linked\ queues,\ hash\ sets,\ linked\ hash\ sets,\r\n\ hash\ maps,\ and\ concurrent\ hashmaps,\ linked\ hash\ maps,\ hashtables\r\n\ iterators,\ list\ iterators,\ enumerations\r\n\ numeric\ storage\ of\ different\ numeric\ types,\ space\ complexity\ /\ memory\r\n\ pass-by-value\r\n\ \r\n\ remaining\ topics\:\r\n\ 1.\ priority\ queues\r\n\ 2.\ trees\r\n\ 3.\ final\ review\r\n
comment7.params=a
comment7.target=void\ solutionThree(int[])
comment8.params=q
comment8.target=void\ error(java.lang.Integer)
comment9.params=
comment9.target=void\ burger()
numComments=10
