#BlueJ class context
comment0.target=ListExample
comment0.text=\r\n\ We\ know\ that\ a\ static\ array\ is\ accessed\ by\ index\ positions\ and\ has\ a\ fixed\r\n\ number\ of\ elements\r\n\ A\ dynamic\ array\ is\ accessed\ by\ index\ positions\ and\ has\ a\ variable\ number\ of\ elements\r\n\ \r\n\ A\ linked\ list\ is\ a\ data\ structure\ of\ nodes\ where\ each\ node\ carries\ a\ value\ and\r\n\ also\ has\ a\ pointer\ to\ the\ next\ node\r\n\ They\ are\ LINKED\ together\r\n\ \r\n\ Don't\ think\ about\ elements\ in\ a\ linked\ list\ as\ having\ index\ positions\r\n\ Technically\ they\ do,\ but\ it\ is\ not\ efficient\ to\ access\ elements\ at\ index\ positions\r\n\ of\ a\ linked\ list\r\n\ \r\n\ We\ use\ linked\ lists\ for\ adding\ and\ removing\ elements\ near\ the\ beginning\ or\ end\r\n\ of\ the\ list;\ this\ has\ much\ better\ time\ complexity\ than\ arraylists\r\n\ \r\n\ In\ this\ lesson,\ we\ briefly\ reviewed\ exception\ handling\ and\ discussed\ file\ I/O\r\n\ We\ also\ reviewed\ threading\ briefly\:\ 2\ options\r\n\ We\ also\ skimmed\ the\ surface\ of\ linkedlists\r\n\ \r\n\ We\ will\ have\ a\ few\ examples\ with\ linked\ lists\ but\ will\ primarily\ be\ talking\ about\r\n\ iterators\ and\ other\ types\ of\ data\ strucutres\r\n\ \r\n\ Other\ remaining\ topics\ for\ the\ last\ few\ lessons\:\r\n\ 1.\ 2D\ matrices,\ static\ array\ of\ dynamic\ arrays\r\n\ 2.\ switch\ statement\ with\ char\ data\ type\ instead\ of\ int\r\n\ 3.\ pass\ by\ value\r\n\ 4.\ binary\ search\ trees\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
numComments=2
